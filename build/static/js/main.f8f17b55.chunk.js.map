{"version":3,"sources":["components/List.js","components/Form.js","components/Contacts.js","components/App.js","serviceWorker.js","index.js"],"names":["List","state","filterText","onChageFilterText","e","setState","target","value","filteredContacts","this","props","contacts","filter","contact","name","toLowerCase","indexOf","className","id","onChange","aria-describedby","map","key","number","Component","Form","onSubmit","preventDefault","addContact","bind","Contacts","App","push","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iSA6DeA,G,iNAtDXC,MAAQ,CACJC,WAAY,I,EAEhBC,kBAAoB,SAACC,GACjB,EAAKC,SAAS,CACVH,WAAYE,EAAEE,OAAOC,S,wEAGnB,IAAD,OACCC,EAAmBC,KAAKC,MAAMC,SAASC,QACzC,SAAAC,GACI,OAEO,IAFAA,EAAQC,KAAKC,cAAcC,QAC9B,EAAKf,MAAMC,WAAWa,kBAIlC,OACI,yBAAKE,UAAU,QACX,6BAEA,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,uBACX,0BAAMA,UAAU,mBAAmBC,GAAG,UAAtC,oBAEJ,2BACIJ,KAAM,SACNI,GAAI,SACJX,MAAOE,KAAKR,MAAMC,WAClBiB,SAAUV,KAAKN,kBACfc,UAAU,eACVG,mBAAiB,YAGzB,6BACA,yBAAKH,UAAU,QACX,yBAAKA,UAAU,eAAf,eAGA,yBAAKA,UAAU,aACX,4BACKT,EAAiBa,KAAI,SAAAR,GAAO,OACzB,wBAAIS,IAAKT,EAAQU,QACb,0BAAMN,UAAW,QAASJ,EAAQC,MAClC,0BAAMG,UAAW,eAAgBJ,EAAQU,oB,GA/C1DC,c,4OCAZ,IA8DQC,EA9Df,YACI,aAAe,IAAD,8BACV,+CAGJxB,MAAQ,CACJa,KAAM,GACNS,OAAQ,IANE,EASdJ,SAAW,SAACf,GACR,EAAKC,SAAL,eACKD,EAAEE,OAAOQ,KAAOV,EAAEE,OAAOC,SAXpB,EAkBdmB,SAAW,SAACtB,GACRA,EAAEuB,iBACF,EAAKjB,MAAMkB,W,yWAAX,IACO,EAAK3B,QAEZ,EAAKI,SAAS,CACVS,KAAM,GACNS,OAAQ,MAvBZ,EAAKJ,SAAW,EAAKA,SAASU,KAAd,gBAFN,EADlB,sEA+BQ,OACI,yBAAKZ,UAAU,SACX,yBAAKA,UAAU,eAAf,OAGA,yBAAKA,UAAU,aAGX,0BAAMS,SAAUjB,KAAKiB,UACjB,yBAAKT,UAAU,qBACX,yBAAKA,UAAU,uBACX,0BAAMA,UAAU,mBAAmBC,GAAG,QAAtC,UAEJ,2BAAOD,UAAU,eAAeH,KAAK,OAAOI,GAAG,OAAOE,mBAAiB,OAAOb,MAAOE,KAAKR,MAAMa,KAAMK,SAAUV,KAAKU,YAGzH,yBAAKF,UAAU,oBACX,yBAAKA,UAAU,uBACX,0BAAMA,UAAU,mBAAmBC,GAAG,UAAtC,YAEJ,2BAAOD,UAAU,eAAeH,KAAK,SAASI,GAAG,SAASE,mBAAiB,SAASb,MAAOE,KAAKR,MAAMsB,OAAQJ,SAAUV,KAAKU,YAGjI,4BAAQF,UAAU,4BAAlB,cAtDxB,GAA0BO,aCgBXM,EAdE,SAACpB,GAAD,OAEb,6BACI,kBAAC,EAAD,CAAMC,SAAUD,EAAMC,WACtB,6BACA,kBAAC,EAAD,CAAMiB,WAAYlB,EAAMkB,eC8BjBG,E,2MAnCb9B,MAAQ,CACNU,SAAU,CACR,CACEG,KAAM,UACNS,OAAQ,gBAEV,CACET,KAAM,UACNS,OAAQ,QAEV,CACET,KAAM,UACNS,OAAQ,c,EAKdK,WAAa,SAACf,GAAa,IACjBF,EAAa,EAAKV,MAAlBU,SACRA,EAASqB,KAAKnB,GACd,EAAKR,SAAS,CACZM,c,wEAKF,OACE,yBAAKM,UAAU,aACb,kBAAC,EAAD,CACEW,WAAYnB,KAAKmB,WACjBjB,SAAUF,KAAKR,MAAMU,gB,GA/Bba,aCQES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f8f17b55.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass List extends Component {\r\n    static propTypes = {\r\n        contacts: PropTypes.array.isRequired\r\n    }\r\n    state = {\r\n        filterText: ''\r\n    }\r\n    onChageFilterText = (e) => {\r\n        this.setState({\r\n            filterText: e.target.value\r\n        })\r\n    }\r\n    render() {\r\n        const filteredContacts = this.props.contacts.filter(\r\n            contact => {\r\n                return contact.name.toLowerCase().indexOf(\r\n                    this.state.filterText.toLowerCase()\r\n                ) !== -1\r\n            }\r\n        )\r\n        return (\r\n            <div className=\"list\">\r\n                <br />\r\n\r\n                <div className=\"input-group mb-3\">\r\n                    <div className=\"input-group-prepend\">\r\n                        <span className=\"input-group-text\" id=\"filter\">Filter by Name </span>\r\n                    </div>\r\n                    <input\r\n                        name={\"filter\"}\r\n                        id={\"filter\"}\r\n                        value={this.state.filterText}\r\n                        onChange={this.onChageFilterText}\r\n                        className=\"form-control\"\r\n                        aria-describedby=\"filter\"></input>\r\n\r\n                </div>\r\n                <br />\r\n                <div className=\"card\">\r\n                    <div className=\"card-header\">\r\n                        Number List\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                        <ul>\r\n                            {filteredContacts.map(contact =>\r\n                                <li key={contact.number} >\r\n                                    <span className={\"name\"}>{contact.name}</span>\r\n                                    <span className={\"float-right\"}>{contact.number}</span>\r\n                                </li>\r\n                            )}\r\n                        </ul>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default List","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport class Form extends Component {\r\n    constructor() {\r\n        super();\r\n        this.onChange = this.onChange.bind(this)\r\n    }\r\n    state = {\r\n        name: '',\r\n        number: ''\r\n\r\n    }\r\n    onChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n\r\n    }\r\n    static propTypes = {\r\n        addContact: PropTypes.func\r\n    }\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addContact({\r\n            ...this.state\r\n        })\r\n        this.setState({\r\n            name: '',\r\n            number: ''\r\n        })\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"card \">\r\n                <div className=\"card-header\">\r\n                    ADD\r\n                </div>\r\n                <div className=\"card-body\">\r\n\r\n\r\n                    <form onSubmit={this.onSubmit}>\r\n                        <div className=\"input-group mb-3 \">\r\n                            <div className=\"input-group-prepend\">\r\n                                <span className=\"input-group-text\" id=\"name\">Name </span>\r\n                            </div>\r\n                            <input className=\"form-control\" name=\"name\" id=\"name\" aria-describedby=\"name\" value={this.state.name} onChange={this.onChange}></input>\r\n\r\n                        </div>\r\n                        <div className=\"input-group mb-3\">\r\n                            <div className=\"input-group-prepend\">\r\n                                <span className=\"input-group-text\" id=\"number\">Number </span>\r\n                            </div>\r\n                            <input className=\"form-control\" name=\"number\" id=\"number\" aria-describedby=\"number\" value={this.state.number} onChange={this.onChange}></input>\r\n\r\n                        </div>\r\n                        <button className=\"btn btn-dark float-right\" >ADD</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport List from './List'\r\nimport Form from './Form'\r\n\r\nconst Contacts = (props) =>\r\n\r\n    <div>\r\n        <List contacts={props.contacts} />\r\n        <br />\r\n        <Form addContact={props.addContact} />\r\n\r\n    </div>\r\n\r\nContacts.propTypes = {\r\n    contacts: PropTypes.array.isRequired,\r\n    addContact: PropTypes.func\r\n}\r\n\r\nexport default Contacts\r\n","import React, { Component } from 'react'\r\nimport '../App.css'\r\nimport Contacts from './Contacts'\r\n\r\nclass App extends Component {\r\n  state = {\r\n    contacts: [\r\n      {\r\n        name: 'Denemea',\r\n        number: '456789909876'\r\n      },\r\n      {\r\n        name: 'Denemeb',\r\n        number: '2345'\r\n      },\r\n      {\r\n        name: 'Denemec',\r\n        number: '34543356'\r\n      }\r\n    ]\r\n\r\n  }\r\n  addContact = (contact) => {\r\n    const { contacts } = this.state\r\n    contacts.push(contact)\r\n    this.setState({\r\n      contacts\r\n    })\r\n\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <Contacts\r\n          addContact={this.addContact}\r\n          contacts={this.state.contacts} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}